{"ast":null,"code":"import _objectSpread from \"/Users/ruizhou/Desktop/navtask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/Users/ruizhou/Desktop/navtask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ruizhou/Desktop/navtask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/ruizhou/Desktop/navtask/src/components/Card.js\";\nimport \"../styles/Card.css\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport CardEditor from \"./CardEditor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TrelloOrdering() {\n  // Creates an OAuth Service called \"trello\"\n  TrelloOAuth(); // Prefix for all Trello Rest API Commands\n\n  var trelloAPIPrefix = \"https://api.trello.com/1/\"; // For use with POST / PUT operations\n\n  var payload = {}; // Google Apps Script's options for GET requests\n\n  var getOptions = {\n    \"method\": \"GET\",\n    \"oAuthServiceName\": \"trello\",\n    \"oAuthUseToken\": \"always\"\n  }; // Google Apps Script's options for POST requests\n\n  var putOptions = {\n    \"method\": \"PUT\",\n    \"payload\": payload,\n    \"oAuthServiceName\": \"trello\",\n    \"oAuthUseToken\": \"always\"\n  }; // Fetch all boards in an organization\n\n  var result = UrlFetchApp.fetch(trelloAPIPrefix + \"organizations/\" + trelloOrganizationName + \"/boards\", getOptions); // JSON Response from the Request\n\n  var response = JSON.parse(result); // Container that will hold all board ID's in an organization\n\n  var boards = []; // For each item in the JSON array, push it into the boards array\n\n  for (var r in response) // \"id\" is the boardID\n  boards.push(response[r][\"id\"]); // Iterate over each board and complete the following actions\n\n\n  for (var board in boards) {\n    // Fetch the lists in a board\n    var result = UrlFetchApp.fetch(trelloAPIPrefix + \"boards/\" + boards[board] + \"/lists\", getOptions); // JSON Response from the Request\n\n    var response = JSON.parse(result); // Container which will hold all List ID's\n\n    var lists = []; // Push each list ID onto the lists array\n\n    for (var r in response) // \"id\" is the list ID retrieved from the request\n    lists.push(response[r][\"id\"]); // For each list...\n\n\n    for (var list in lists) {\n      // Get all cards in the list\n      var result = UrlFetchApp.fetch(trelloAPIPrefix + \"lists/\" + lists[list] + \"/cards\", getOptions); // Parse the JSON response\n\n      var response = JSON.parse(result); // Each of these is a container to hold cards that are marked with \n\n      var reds = [];\n      var oranges = [];\n      var yellows = [];\n      var greens = [];\n      var limes = []; // For each card...\n\n      for (var r in response) {\n        // Take each label in the cards labels field...\n        for (var label in response[r][\"labels\"]) {\n          // For this label, find the color it's in and add it to that list.\n          switch (response[r][\"labels\"][label][\"color\"]) {\n            case \"red\":\n              reds.push(response[r]);\n              break;\n\n            case \"orange\":\n              oranges.push(response[r]);\n              break;\n\n            case \"yellow\":\n              yellows.push(response[r]);\n              break;\n\n            case \"green\":\n              greens.push(response[r]);\n              break;\n\n            case \"lime\":\n              limes.push(response[r]);\n              break;\n          }\n        }\n      }\n      /**\n       * The arrays at this point may have duplicates in them, so we are going to remove\n       * those before making the final PUT requests to Trello for organization.\n       */\n      // Takes the arrays in order and removes any duplicate elements\n\n\n      var orderedList = UniqueArrayElements([].concat(reds, oranges, yellows, greens, limes)); // If there are cards to add...\n\n      if (orderedList.length > 0) {\n        // For each card...\n        for (var card in orderedList) {\n          // Change the \"value\" in the payload to be the correct card position\n          // Trello is 1-based not 0-based, so we increment the value. \n          payload[\"value\"] = card + 1; // Make the HTTP PUT request to update the card position\n\n          var result = UrlFetchApp.fetch(trelloAPIPrefix + \"cards/\" + orderedList[card][\"id\"] + \"/pos\", putOptions);\n        }\n      }\n    }\n  }\n}\n\n_c = TrelloOrdering;\n\nclass Card extends Component {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      hover: false,\n      editing: false\n    };\n\n    this.startHover = () => this.setState({\n      hover: true\n    });\n\n    this.endHover = () => this.setState({\n      hover: false\n    });\n\n    this.startEditing = () => this.setState({\n      hover: false,\n      editing: true,\n      text: this.props.card.text\n    });\n\n    this.endEditing = () => this.setState({\n      hover: false,\n      editing: false\n    });\n\n    this.editCard = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n        var _this$props, card, dispatch;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, card = _this$props.card, dispatch = _this$props.dispatch;\n\n              _this.endEditing();\n\n              dispatch({\n                type: \"CHANGE_CARD_TEXT\",\n                payload: {\n                  cardId: card._id,\n                  cardText: text\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.deleteCard = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _this$props2, listId, card, dispatch;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _this$props2 = _this.props, listId = _this$props2.listId, card = _this$props2.card, dispatch = _this$props2.dispatch;\n            dispatch({\n              type: \"DELETE_CARD\",\n              payload: {\n                cardId: card._id,\n                listId\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          card = _this$props3.card,\n          index = _this$props3.index;\n    const _this$state = this.state,\n          hover = _this$state.hover,\n          editing = _this$state.editing;\n\n    if (!editing) {\n      return /*#__PURE__*/_jsxDEV(Draggable, {\n        draggableId: card._id,\n        index: index,\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread(_objectSpread({\n          ref: provided.innerRef\n        }, provided.draggableProps), provided.dragHandleProps), {}, {\n          className: \"Card\",\n          onMouseEnter: this.startHover,\n          onMouseLeave: this.endHover,\n          children: [hover && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Card-Icons\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"Card-Icon\",\n              onClick: this.startEditing,\n              children: /*#__PURE__*/_jsxDEV(\"ion-icon\", {\n                name: \"create\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this), card.text]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(CardEditor, {\n        text: card.text,\n        onSave: this.editCard,\n        onDelete: this.deleteCard,\n        onCancel: this.endEditing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  card: state.cardsById[ownProps.cardId]\n});\n\nexport default connect(mapStateToProps)(Card);\n\nvar _c;\n\n$RefreshReg$(_c, \"TrelloOrdering\");","map":{"version":3,"sources":["/Users/ruizhou/Desktop/navtask/src/components/Card.js"],"names":["React","Component","connect","Draggable","CardEditor","TrelloOrdering","TrelloOAuth","trelloAPIPrefix","payload","getOptions","putOptions","result","UrlFetchApp","fetch","trelloOrganizationName","response","JSON","parse","boards","r","push","board","lists","list","reds","oranges","yellows","greens","limes","label","orderedList","UniqueArrayElements","concat","length","card","Card","state","hover","editing","startHover","setState","endHover","startEditing","text","props","endEditing","editCard","dispatch","type","cardId","_id","cardText","deleteCard","listId","render","index","provided","snapshot","innerRef","draggableProps","dragHandleProps","mapStateToProps","ownProps","cardsById"],"mappings":";;;;AAAA,OAAO,oBAAP;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,SAASC,cAAT,GAA0B;AACxB;AACAC,EAAAA,WAAW,GAFa,CAIxB;;AACA,MAAIC,eAAe,GAAG,2BAAtB,CALwB,CAOxB;;AACA,MAAIC,OAAO,GAAG,EAAd,CARwB,CAUxB;;AACA,MAAIC,UAAU,GAAG;AACf,cAAU,KADK;AAEf,wBAAoB,QAFL;AAGf,qBAAiB;AAHF,GAAjB,CAXwB,CAiBxB;;AACA,MAAIC,UAAU,GAAG;AACf,cAAW,KADI;AAEf,eAAYF,OAFG;AAGf,wBAAoB,QAHL;AAIf,qBAAiB;AAJF,GAAjB,CAlBwB,CAyBxB;;AACA,MAAIG,MAAM,GAAGC,WAAW,CAACC,KAAZ,CACXN,eAAe,GAAG,gBAAlB,GAAqCO,sBAArC,GAA8D,SADnD,EAEXL,UAFW,CAAb,CA1BwB,CA8BxB;;AACA,MAAIM,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWN,MAAX,CAAf,CA/BwB,CAiCxB;;AACA,MAAIO,MAAM,GAAG,EAAb,CAlCwB,CAoCxB;;AACA,OAAK,IAAIC,CAAT,IAAcJ,QAAd,EACE;AACAG,EAAAA,MAAM,CAACE,IAAP,CAAYL,QAAQ,CAACI,CAAD,CAAR,CAAY,IAAZ,CAAZ,EAvCsB,CA0CxB;;;AACA,OAAI,IAAIE,KAAR,IAAiBH,MAAjB,EACA;AACE;AACA,QAAIP,MAAM,GAAGC,WAAW,CAACC,KAAZ,CACXN,eAAe,GAAG,SAAlB,GAA8BW,MAAM,CAACG,KAAD,CAApC,GAA8C,QADnC,EAEXZ,UAFW,CAAb,CAFF,CAME;;AACA,QAAIM,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWN,MAAX,CAAf,CAPF,CASE;;AACA,QAAIW,KAAK,GAAG,EAAZ,CAVF,CAYE;;AACA,SAAI,IAAIH,CAAR,IAAaJ,QAAb,EACE;AACAO,IAAAA,KAAK,CAACF,IAAN,CAAWL,QAAQ,CAACI,CAAD,CAAR,CAAY,IAAZ,CAAX,EAfJ,CAkBE;;;AACA,SAAI,IAAII,IAAR,IAAgBD,KAAhB,EACA;AACE;AACA,UAAIX,MAAM,GAAGC,WAAW,CAACC,KAAZ,CACXN,eAAe,GAAG,QAAlB,GAA6Be,KAAK,CAACC,IAAD,CAAlC,GAA2C,QADhC,EAEXd,UAFW,CAAb,CAFF,CAME;;AACA,UAAIM,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWN,MAAX,CAAf,CAPF,CASE;;AACA,UAAIa,IAAI,GAAG,EAAX;AACA,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIC,KAAK,GAAG,EAAZ,CAdF,CAgBE;;AACA,WAAI,IAAIT,CAAR,IAAaJ,QAAb,EACA;AACE;AACA,aAAI,IAAIc,KAAR,IAAiBd,QAAQ,CAACI,CAAD,CAAR,CAAY,QAAZ,CAAjB,EACA;AACE;AACA,kBAAOJ,QAAQ,CAACI,CAAD,CAAR,CAAY,QAAZ,EAAsBU,KAAtB,EAA6B,OAA7B,CAAP;AAEE,iBAAK,KAAL;AACEL,cAAAA,IAAI,CAACJ,IAAL,CAAUL,QAAQ,CAACI,CAAD,CAAlB;AACA;;AACF,iBAAK,QAAL;AACEM,cAAAA,OAAO,CAACL,IAAR,CAAaL,QAAQ,CAACI,CAAD,CAArB;AACA;;AACF,iBAAK,QAAL;AACEO,cAAAA,OAAO,CAACN,IAAR,CAAaL,QAAQ,CAACI,CAAD,CAArB;AACA;;AACF,iBAAK,OAAL;AACEQ,cAAAA,MAAM,CAACP,IAAP,CAAYL,QAAQ,CAACI,CAAD,CAApB;AACA;;AACF,iBAAK,MAAL;AACES,cAAAA,KAAK,CAACR,IAAN,CAAWL,QAAQ,CAACI,CAAD,CAAnB;AACA;AAhBJ;AAkBD;AACF;AAED;AACN;AACA;AACA;AAEM;;;AACA,UAAIW,WAAW,GAAGC,mBAAmB,CAAC,GAAGC,MAAH,CAAUR,IAAV,EAAgBC,OAAhB,EAAyBC,OAAzB,EAAkCC,MAAlC,EAA0CC,KAA1C,CAAD,CAArC,CAlDF,CAoDE;;AACA,UAAGE,WAAW,CAACG,MAAZ,GAAqB,CAAxB,EACA;AACE;AACA,aAAI,IAAIC,IAAR,IAAgBJ,WAAhB,EACA;AACE;AACA;AACAtB,UAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB0B,IAAI,GAAG,CAA1B,CAHF,CAKE;;AACA,cAAIvB,MAAM,GAAGC,WAAW,CAACC,KAAZ,CACXN,eAAe,GAAG,QAAlB,GAA6BuB,WAAW,CAACI,IAAD,CAAX,CAAkB,IAAlB,CAA7B,GAAuD,MAD5C,EAEXxB,UAFW,CAAb;AAGD;AACF;AACF;AACF;AACF;;KAtIQL,c;;AAwIT,MAAM8B,IAAN,SAAmBlC,SAAnB,CAA6B;AAAA;AAAA;;AAAA;AAAA;AAAA,SAC3BmC,KAD2B,GACnB;AACNC,MAAAA,KAAK,EAAE,KADD;AAENC,MAAAA,OAAO,EAAE;AAFH,KADmB;;AAAA,SAM3BC,UAN2B,GAMd,MAAM,KAAKC,QAAL,CAAc;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAAd,CANQ;;AAAA,SAO3BI,QAP2B,GAOhB,MAAM,KAAKD,QAAL,CAAc;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAAd,CAPU;;AAAA,SAS3BK,YAT2B,GASZ,MACb,KAAKF,QAAL,CAAc;AACZH,MAAAA,KAAK,EAAE,KADK;AAEZC,MAAAA,OAAO,EAAE,IAFG;AAGZK,MAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWV,IAAX,CAAgBS;AAHV,KAAd,CAVyB;;AAAA,SAiB3BE,UAjB2B,GAiBd,MAAM,KAAKL,QAAL,CAAc;AAAEH,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,OAAO,EAAE;AAAzB,KAAd,CAjBQ;;AAAA,SAmB3BQ,QAnB2B;AAAA,0EAmBhB,iBAAMH,IAAN;AAAA;;AAAA;AAAA;AAAA;AAAA,4BACkB,KAAI,CAACC,KADvB,EACDV,IADC,eACDA,IADC,EACKa,QADL,eACKA,QADL;;AAGT,cAAA,KAAI,CAACF,UAAL;;AAEAE,cAAAA,QAAQ,CAAC;AACPC,gBAAAA,IAAI,EAAE,kBADC;AAEPxC,gBAAAA,OAAO,EAAE;AAAEyC,kBAAAA,MAAM,EAAEf,IAAI,CAACgB,GAAf;AAAoBC,kBAAAA,QAAQ,EAAER;AAA9B;AAFF,eAAD,CAAR;;AALS;AAAA;AAAA;AAAA;AAAA;AAAA,OAnBgB;;AAAA;AAAA;AAAA;AAAA;;AAAA,SA8B3BS,UA9B2B,yEA8Bd;AAAA;;AAAA;AAAA;AAAA;AAAA,2BACwB,KAAI,CAACR,KAD7B,EACHS,MADG,gBACHA,MADG,EACKnB,IADL,gBACKA,IADL,EACWa,QADX,gBACWA,QADX;AAGXA,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAE,aADC;AAEPxC,cAAAA,OAAO,EAAE;AAAEyC,gBAAAA,MAAM,EAAEf,IAAI,CAACgB,GAAf;AAAoBG,gBAAAA;AAApB;AAFF,aAAD,CAAR;;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA,KA9Bc;AAAA;;AAuC3BC,EAAAA,MAAM,GAAG;AAAA,yBACiB,KAAKV,KADtB;AAAA,UACCV,IADD,gBACCA,IADD;AAAA,UACOqB,KADP,gBACOA,KADP;AAAA,wBAEoB,KAAKnB,KAFzB;AAAA,UAECC,KAFD,eAECA,KAFD;AAAA,UAEQC,OAFR,eAEQA,OAFR;;AAKP,QAAI,CAACA,OAAL,EAAc;AACZ,0BACE,QAAC,SAAD;AAAW,QAAA,WAAW,EAAEJ,IAAI,CAACgB,GAA7B;AAAkC,QAAA,KAAK,EAAEK,KAAzC;AAAA,kBACG,CAACC,QAAD,EAAWC,QAAX,kBACC;AACE,UAAA,GAAG,EAAED,QAAQ,CAACE;AADhB,WAEMF,QAAQ,CAACG,cAFf,GAGMH,QAAQ,CAACI,eAHf;AAIE,UAAA,SAAS,EAAC,MAJZ;AAKE,UAAA,YAAY,EAAE,KAAKrB,UALrB;AAME,UAAA,YAAY,EAAE,KAAKE,QANrB;AAAA,qBAQGJ,KAAK,iBACJ;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,WAAf;AAA2B,cAAA,OAAO,EAAE,KAAKK,YAAzC;AAAA,qCACE;AAAU,gBAAA,IAAI,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBATJ,EAgBGR,IAAI,CAACS,IAhBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cADF;AAyBD,KA1BD,MA0BO;AACL,0BACE,QAAC,UAAD;AACE,QAAA,IAAI,EAAET,IAAI,CAACS,IADb;AAEE,QAAA,MAAM,EAAE,KAAKG,QAFf;AAGE,QAAA,QAAQ,EAAE,KAAKM,UAHjB;AAIE,QAAA,QAAQ,EAAE,KAAKP;AAJjB;AAAA;AAAA;AAAA;AAAA,cADF;AAQD;AACF;;AAhF0B;;AAmF7B,MAAMgB,eAAe,GAAG,CAACzB,KAAD,EAAQ0B,QAAR,MAAsB;AAC5C5B,EAAAA,IAAI,EAAEE,KAAK,CAAC2B,SAAN,CAAgBD,QAAQ,CAACb,MAAzB;AADsC,CAAtB,CAAxB;;AAKA,eAAe/C,OAAO,CAAC2D,eAAD,CAAP,CAAyB1B,IAAzB,CAAf","sourcesContent":["import \"../styles/Card.css\";\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport CardEditor from \"./CardEditor\";\n\nfunction TrelloOrdering() {\n  // Creates an OAuth Service called \"trello\"\n  TrelloOAuth();\n  \n  // Prefix for all Trello Rest API Commands\n  var trelloAPIPrefix = \"https://api.trello.com/1/\";\n  \n  // For use with POST / PUT operations\n  var payload = {};\n  \n  // Google Apps Script's options for GET requests\n  var getOptions = {\n    \"method\": \"GET\",\n    \"oAuthServiceName\": \"trello\",\n    \"oAuthUseToken\": \"always\",\n  };\n  \n  // Google Apps Script's options for POST requests\n  var putOptions = {\n    \"method\" : \"PUT\",\n    \"payload\" : payload,\n    \"oAuthServiceName\": \"trello\",\n    \"oAuthUseToken\": \"always\",\n  };\n  \n  // Fetch all boards in an organization\n  var result = UrlFetchApp.fetch(\n    trelloAPIPrefix + \"organizations/\" + trelloOrganizationName + \"/boards\",\n    getOptions);\n  \n  // JSON Response from the Request\n  var response = JSON.parse(result);\n  \n  // Container that will hold all board ID's in an organization\n  var boards = [];\n  \n  // For each item in the JSON array, push it into the boards array\n  for (var r in response)\n    // \"id\" is the boardID\n    boards.push(response[r][\"id\"]);\n  \n  \n  // Iterate over each board and complete the following actions\n  for(var board in boards)\n  {\n    // Fetch the lists in a board\n    var result = UrlFetchApp.fetch(\n      trelloAPIPrefix + \"boards/\" + boards[board] + \"/lists\",\n      getOptions);\n    \n    // JSON Response from the Request\n    var response = JSON.parse(result);\n    \n    // Container which will hold all List ID's\n    var lists = [];\n    \n    // Push each list ID onto the lists array\n    for(var r in response)\n      // \"id\" is the list ID retrieved from the request\n      lists.push(response[r][\"id\"]);\n    \n    \n    // For each list...\n    for(var list in lists)\n    {\n      // Get all cards in the list\n      var result = UrlFetchApp.fetch(\n        trelloAPIPrefix + \"lists/\" + lists[list] + \"/cards\",\n        getOptions);\n      \n      // Parse the JSON response\n      var response = JSON.parse(result);\n      \n      // Each of these is a container to hold cards that are marked with \n      var reds = [];\n      var oranges = [];\n      var yellows = [];\n      var greens = [];\n      var limes = [];\n      \n      // For each card...\n      for(var r in response)\n      {\n        // Take each label in the cards labels field...\n        for(var label in response[r][\"labels\"])\n        {\n          // For this label, find the color it's in and add it to that list.\n          switch(response[r][\"labels\"][label][\"color\"])\n          {\n            case(\"red\"):\n              reds.push(response[r]);\n              break;\n            case(\"orange\"):\n              oranges.push(response[r]);\n              break;\n            case(\"yellow\"):\n              yellows.push(response[r]);\n              break;\n            case(\"green\"):\n              greens.push(response[r]);\n              break;\n            case(\"lime\"):\n              limes.push(response[r]);\n              break;\n          }\n        }\n      }\n      \n      /**\n       * The arrays at this point may have duplicates in them, so we are going to remove\n       * those before making the final PUT requests to Trello for organization.\n       */\n      \n      // Takes the arrays in order and removes any duplicate elements\n      var orderedList = UniqueArrayElements([].concat(reds, oranges, yellows, greens, limes));\n      \n      // If there are cards to add...\n      if(orderedList.length > 0)\n      {\n        // For each card...\n        for(var card in orderedList)\n        {\n          // Change the \"value\" in the payload to be the correct card position\n          // Trello is 1-based not 0-based, so we increment the value. \n          payload[\"value\"] = card + 1;\n          \n          // Make the HTTP PUT request to update the card position\n          var result = UrlFetchApp.fetch(\n            trelloAPIPrefix + \"cards/\" + orderedList[card][\"id\"] + \"/pos\",\n            putOptions);\n        }\n      }\n    }\n  }\n}\n\nclass Card extends Component {\n  state = {\n    hover: false,\n    editing: false\n  };\n\n  startHover = () => this.setState({ hover: true });\n  endHover = () => this.setState({ hover: false });\n\n  startEditing = () =>\n    this.setState({\n      hover: false,\n      editing: true,\n      text: this.props.card.text\n      \n    });\n\n  endEditing = () => this.setState({ hover: false, editing: false });\n\n  editCard = async text => {\n    const { card, dispatch } = this.props;\n\n    this.endEditing();\n\n    dispatch({\n      type: \"CHANGE_CARD_TEXT\",\n      payload: { cardId: card._id, cardText: text }\n    });\n  };\n\n  deleteCard = async () => {\n    const { listId, card, dispatch } = this.props;\n\n    dispatch({\n      type: \"DELETE_CARD\",\n      payload: { cardId: card._id, listId }\n    });\n  };\n\n  render() {\n    const { card, index } = this.props;\n    const { hover, editing } = this.state;\n\n\n    if (!editing) {\n      return (\n        <Draggable draggableId={card._id} index={index}>\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              className=\"Card\"\n              onMouseEnter={this.startHover}\n              onMouseLeave={this.endHover}\n            >\n              {hover && (\n                <div className=\"Card-Icons\">\n                  <div className=\"Card-Icon\" onClick={this.startEditing}>\n                    <ion-icon name=\"create\" />\n                  </div>\n                </div>\n              )}\n\n              {card.text}\n            \n            </div>\n          )}\n        </Draggable>\n      );\n    } else {\n      return (\n        <CardEditor\n          text={card.text}\n          onSave={this.editCard}\n          onDelete={this.deleteCard}\n          onCancel={this.endEditing}\n        />\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  card: state.cardsById[ownProps.cardId]\n});\n\n\nexport default connect(mapStateToProps)(Card);\n"]},"metadata":{},"sourceType":"module"}